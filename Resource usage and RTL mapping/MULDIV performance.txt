Divisor designs developed:

/-/ tDIVrest32u    - Theoretical restoring divider. without any upgrade. 32 clock cycles every division, no matter what are the input operands.
/-/ bDIVrest32u    - Basic restoring divider. Checks if dividend "a" is lower than divisor "b", which skips the division operation (does it in one clock cycle).
/-/ qsDIVrest32u   - Quick start restoring divider. Pushes the dividend to the left-most position in the quotient register at the start, which skips "n" number of left zeros the dividend has in clock cycles. Great when the dividend has a low value.
/-/ eqsDIVrest32u  - Even quicker start restoring divider. Pushes the dividend to the highest bit position of the divisor in the remainder/quotient registers, which makes it to start even faster than quick start version. The number of clock cycles saved equals to the number of left zeros the dividend has, plus the number of bits to the right from the leftmost '1' of the divisor. Great when the dividend has a low value and when the divisor has a high value (but the dividend cannot be lower than the divisor because skips it).
/-/ seDIVrest32u   - Skip execution restoring divider. Uses pretty much the same resources as the eqsDIV, but applies the same concept both at the start and during the operation, skipping many '0' quotient resulting bits iterations. The only disadvantatge from the eqsDIV version is its combinational logic added in the loop phase, increasing the combinational latency in that sector, which could limit the frequency of operation if is the critic path.
/-/ dDIVrest32u    - Double restoring divider. Uses two subtractor units in order to push two quotient result bits each cycles, halving the total of clock cycles it takes to finish the loop phase.
/-/ deqsDIVrest32u - Double even quicker start restoring divider. Mixes both eqsDIV and dDIV designs providing a better performing model, but also the most resource demanding and with a higher combinational latency as the critical path has increased (not that important if doesn't ends being part of the critical path in the whole core, which is what really limits the operation frequency).
/-/ dseDIVrest32u  - Double skip execution restoring divider. Mixes both dDIV and seDIV designs, performing the best of all the 32bit developed versions. The only thing against it is the increased latency in the loop phase, which for this model is two subtraction units and the shifting system, but in resource allocation is pretty much the same as re-uses the same internal logic as the eqsDIV.

///////////////////////////////////////////////////////////////////
//      DIVISOR DESIGNS - DYNAMIC CLOCK LATENCY PERFORMANCE      //
///////////////////////////////////////////////////////////////////

The test includes different divisor maximum bit widths in order 
to test various cases; from the more unusual ones like dividend 
lower than the divisor, to more realistic. At the signed test, 
only the absolute value of the divisor width is accounted for the 
maximum width. The dividend maximum width has been fixed to 32bit, 
as decreasing the dividend would only help to finish early the 
division, and the best comparison only can be done at the worst 
possible cases, although the actual value is still random with a 
fixed seed.

All divisor operations have two extra clock cycles for input and 
output, with the exception of single-cycle 0 quotient results 
because the input dividend is lower than the divisor.

The following data has been obtained through 10,000 DIV unsigned 
operations using the same initial random seed for all the models.  

_Divisor_width_|_tDIV_|_bDIV_|_qsDIV_|_eqsDIV_|_seDIV_|_dDIV_|_deqsDIV_|_dseDIV_|
      32       |  34  | 17.3 |  17.2 |   2.6  |   2.5 |  9.4 |   2.2   |   2.2  |
      31       |  34  | 17.3 |  17.1 |   3.0  |   2.9 |  9.4 |   2.4   |   2.4  |
      30       |  34  | 17.3 |  16.9 |   3.5  |   3.2 |  9.4 |   2.6   |   2.6  |
      29       |  34  | 17.4 |  17.0 |   4.0  |   3.6 |  9.4 |   2.9   |   2.8  |
      28       |  34  | 17.4 |  17.0 |   4.5  |   3.9 |  9.4 |   3.1   |   3.0  |
      27       |  34  | 17.5 |  17.0 |   4.9  |   4.2 |  9.5 |   3.3   |   3.3  |
      26       |  34  | 17.5 |  17.0 |   5.5  |   4.6 |  9.5 |   3.6   |   3.5  |
      25       |  34  | 17.5 |  17.0 |   6.0  |   4.9 |  9.5 |   3.8   |   3.7  |
      24       |  34  | 17.5 |  17.0 |   6.5  |   5.2 |  9.5 |   4.1   |   4.0  |
      23       |  34  | 17.5 |  17.0 |   6.9  |   5.5 |  9.5 |   4.3   |   4.2  |
      22       |  34  | 17.5 |  17.0 |   7.4  |   5.9 |  9.5 |   4.6   |   4.4  |
      21       |  34  | 17.5 |  17.0 |   7.9  |   6.2 |  9.5 |   4.8   |   4.7  |
      20       |  34  | 17.5 |  17.0 |   8.4  |   6.5 |  9.5 |   5.1   |   4.9  |
      19       |  34  | 17.5 |  17.0 |   8.9  |   6.8 |  9.5 |   5.3   |   5.1  |
      18       |  34  | 17.5 |  17.0 |   9.4  |   7.2 |  9.5 |   5.6   |   5.3  |
      17       |  34  | 17.5 |  17.0 |   9.9  |   7.5 |  9.5 |   5.8   |   5.6  |
      16       |  34  | 17.5 |  17.0 |  10.4  |   7.9 |  9.5 |   6.1   |   5.8  |
      15       |  34  | 17.5 |  17.0 |  10.9  |   8.2 |  9.5 |   6.3   |   6.0  |
      14       |  34  | 17.5 |  17.0 |  11.4  |   8.6 |  9.5 |   6.5   |   6.2  |
      13       |  34  | 17.5 |  17.0 |  11.9  |   9.0 |  9.5 |   6.8   |   6.5  |
      12       |  34  | 17.5 |  17.0 |  12.3  |   9.4 |  9.5 |   7.0   |   6.7  |
      11       |  34  | 17.5 |  17.0 |  12.7  |   9.6 |  9.5 |   7.2   |   6.9  |
      10       |  34  | 17.5 |  17.0 |  13.0  |   9.5 |  9.5 |   7.3   |   6.9  |
       9       |  34  | 17.4 |  16.9 |  13.9  |  10.1 |  9.4 |   7.8   |   7.4  |
       8       |  34  | 17.3 |  16.8 |  14.3  |  10.5 |  9.4 |   8.0   |   7.6  |
       7       |  34  | 17.2 |  16.7 |  14.7  |  10.9 |  9.3 |   8.2   |   7.8  |
       6       |  34  | 16.9 |  16.4 |  14.9  |  11.2 |  9.2 |   8.3   |   7.9  |
       5       |  34  | 16.4 |  15.9 |  14.8  |  11.4 |  8.9 |   8.3   |   8.0  |
       4       |  34  | 15.4 |  15.0 |  14.4  |  11.5 |  8.4 |   8.0   |   7.8  |
       3       |  34  | 13.2 |  12.9 |  12.6  |  11.0 |  7.3 |   7.1   |   7.1  |
       2       |  34  |  9.2 |   8.9 |   8.9  |   8.9 |  5.2 |   5.1   |   5.1  |

As every divisor design has the basic functionality (with the exception 
of the theoretical model), the progression comparison in the starting 
optimization has to be done in the order t, b, qs, eqs, and se designs, 
while the progression comparison in the loop phase optimization has to be 
done in the order t, b, d, deqs and dse. The double models might have a 
reduced operation frequency by how much combinational logic is in the 
loop phase, but in the end, is the critical path of the whole core which 
limits the maximum frequency of operation, which if is this module, you 
might like to downgrade to a lower clock performance but faster version.

The following data has been obtained through 10,000 DIV signed 
operations using the same initial random seed for all the models.

_Divisor_width_|_tDIV_|_bDIV_|_qsDIV_|_eqsDIV_|_seDIV_|_dDIV_|_deqsDIV_|_dseDIV_|
      32       |  34  | 17.3 |  16.6 |   2.6  |   2.5 |  9.4 |   2.2   |   2.2  |
      31       |  34  | 25.7 |  24.6 |   3.8  |   3.6 | 13.7 |   2.9   |   2.9  |
      30       |  34  | 29.8 |  28.3 |   4.9  |   4.6 | 15.8 |   3.6   |   3.6  |
      29       |  34  | 31.9 |  30.2 |   5.9  |   5.4 | 16.9 |   4.1   |   4.1  |
      28       |  34  | 32.9 |  31.1 |   6.9  |   6.1 | 17.4 |   4.7   |   4.6  |
      27       |  34  | 33.4 |  31.5 |   7.9  |   6.8 | 17.7 |   5.1   |   5.1  |
      26       |  34  | 33.7 |  31.7 |   8.9  |   7.5 | 17.8 |   5.7   |   5.6  |
      25       |  34  | 33.8 |  31.8 |   9.9  |   8.2 | 17.9 |   6.2   |   6.0  |
      24       |  34  | 33.9 |  31.9 |  10.9  |   8.8 | 17.9 |   6.7   |   6.5  |
      23       |  34  | 33.9 |  31.9 |  12.0  |   9.5 | 17.9 |   7.2   |   7.0  |
      22       |  34  | 33.9 |  31.9 |  12.9  |  10.1 | 17.9 |   7.7   |   7.4  |
      21       |  34  | 33.9 |  31.9 |  13.9  |  10.8 | 17.9 |   8.2   |   7.9  |
      20       |  34  | 34.0 |  31.9 |  14.9  |  11.4 | 18.0 |   8.7   |   8.3  |
      19       |  34  | 34.0 |  31.9 |  15.9  |  12.1 | 18.0 |   9.2   |   8.8  |
      18       |  34  | 34.0 |  31.9 |  16.9  |  12.8 | 18.0 |   9.7   |   9.3  |
      17       |  34  | 34.0 |  31.9 |  17.9  |  13.4 | 18.0 |  10.2   |   9.7  |
      16       |  34  | 34.0 |  31.9 |  18.9  |  14.1 | 18.0 |  10.7   |  10.2  |
      15       |  34  | 34.0 |  31.9 |  19.9  |  14.9 | 18.0 |  11.1   |  10.6  |
      14       |  34  | 34.0 |  31.9 |  20.9  |  15.6 | 18.0 |  11.7   |  11.1  |
      13       |  34  | 33.9 |  31.9 |  21.8  |  16.4 | 17.9 |  12.1   |  11.5  |
      12       |  34  | 33.9 |  31.9 |  22.7  |  17.0 | 17.9 |  12.6   |  12.0  |
      11       |  34  | 33.9 |  31.9 |  23.4  |  17.5 | 17.9 |  12.9   |  12.3  |
      10       |  34  | 33.9 |  31.9 |  23.9  |  17.3 | 17.9 |  13.2   |  12.4  |
       9       |  34  | 33.8 |  31.8 |  25.8  |  18.7 | 17.9 |  14.1   |  13.3  |
       8       |  34  | 33.7 |  31.7 |  26.7  |  19.3 | 17.8 |  14.6   |  13.8  |
       7       |  34  | 33.5 |  31.5 |  27.5  |  20.1 | 17.7 |  14.9   |  14.1  |
       6       |  34  | 32.9 |  30.9 |  27.9  |  20.7 | 17.4 |  15.2   |  14.4  |
       5       |  34  | 31.8 |  29.9 |  27.8  |  21.3 | 16.9 |  15.1   |  14.5  |
       4       |  34  | 29.9 |  28.1 |  26.8  |  21.5 | 15.8 |  14.6   |  14.2  |
       3       |  34  | 25.7 |  24.2 |  23.7  |  20.5 | 13.7 |  12.9   |  12.9  |
       2       |  34  | 17.2 |  16.2 |  16.2  |  16.2 |  9.3 |   9.0   |   9.0  |


When operating with signed numbers, the negative inputs must be 
corrected into its absolute value in a pre-operating stage, as 
all the presented divider models work only with unsigned values.
This makes an effect where half of the input sample data pass 
through this pre-operation conversion, which mixes high and low 
input operands at the same divisor width test, because of the input 
operand's width maintains 32 bits even when the number might be 
negative. That's the reason of the overall increase in clock 
cycle latency. 

In any case, no matter what are the input operands, the maximum 
clock cycle latency is 34 clock cycles for all the designs but the 
dDIV, deqsDIV and dseDIV models, where it's 18 clock cycles.


//////////////////////////////////////////////////////////////////////////
//      MULDIV DESIGNS - MAXIMUM FREQUENCY OF OPERATION ESTIMATION      //
//////////////////////////////////////////////////////////////////////////

Each design has a maximum frequency of operation limited by the 
critical path that each divisor design has, as every iteration in 
optimization adds more logic, thus, more latency in the path where 
its added the logic, to the point which the critical path may change 
to another path that previously did not have that much combinational 
latency. The next table specifies the estimation of the maximum 
frequency of operation at each design in MHz, provided by Quartus II 
13.1 TimeQuest Timing Analyzer tool with a target platform of 
EP3C16D484C6 from the Cyclone III family.

_____________|__tDIV_|__bDIV_|_qsDIV_|_eqsDIV_|_seDIV_|__dDIV_|_deqsDIV_|_dseDIV_|
Max freq 0C  | 259.0 | 253.3 | 154.6 |  104.8 |  70.9 | 174.6 |   106.2 |   54.3 |
Max freq 85C | 224.5 | 222.8 | 139.3 |   93.8 |  63.5 | 154.9 |    95.5 |   48.6 |

In order to obtain the maximum frequency of operation possible at 
Quartus, it has been stablished a frequency clock of 200MHz (period 
of 5ns), which is near the maximum that the FPGA board can drive 
throught the I/O ports by default (250Mhz). In this way, Quartus will 
try to optimize the routing for the highest frequency of operation 
possible in this estimation. If the maximum frequency of operation is 
higher than the clock, is possible that there's still room for a higher 
operation frequency, but it doesn't make sense to search a higher 
frequency if the I/O ports cannot handle it and if the design uses 
only one clock signal. Also, is important to note that in order to 
estimate the maximum frequency correctly, it has been added a register 
at the end of the operation, as if there isn't, there wouldn't be 
a logic element able to perform the frequency estimation.

The same can be done to the Multifunction IP's modules used for the 
multiplication operation. 

_____________|_LPM_MULT32_|_ALTMULT_ADD32_|
Max freq 0C  |    128.1   |       128.3   |
Max freq 85C |    113.1   |       114.0   |

The maximum operation frequency between them aren't that different 
because this estimation doesn't take into account that the LPM_MULT32 
module only performs unsigned operations, while ALTMULT_ADD32 performs 
both signed and unsigned. This means that LPM_MULT32 requires pre and 
post-module logic to add the ability of operating with signed values, 
decreasing the maximum operation frequency as the MULDIV frequency 
estimation shows when is using one module or the other.

To find a maximum operating frequency at the same level of performance 
on the multiplication modules, it has been synthesized both MULDIV and 
MULDIV2 designs, where the MULDIV uses the LPM_MULT32 and MULDIV2 uses 
the ALTMULT_ADD32 multifunction IPs to perform the multiplication 
operations, both using a tDIVrest32u model (the simplest) in order to 
force that the critical path is at the multiplication operation path 
and not in the division operation path.

_____________|_MULDIV_|_MULDIV2_|
Max freq 0C  |   75.8 |   104.5 |
Max freq 85C |   67.1 |    92.7 |

Now this table compares at the same level both designs, as now both 
can perform signed and unsigned operations. As expected, the MULDIV 
design that uses the LPM_MULT32 module has lowered near 50MHz its 
maximum operating frequency compared to the previous table, and that's 
because the added logic to make it perform signed operations. The 
MULDIV2 design has lowered near 25MHz of maximum operating frequency 
than the ALTMULT_ADD module because there's the addition of logic to 
select the output between the division and multiplication operation 
paths.

Now the idea is to change the divisor module until the division 
operation path increases its latency enough to be the critical 
path, which would make the combination of maximum frequency of 
operation and performance possible with this modules.


MULDIV_______|__tDIV_|__bDIV_|_qsDIV_|_eqsDIV_|_seDIV_|__dDIV_|_deqsDIV_|_dseDIV_|
Max freq 0C  |  75.8 |  71.3 |  74.2 |   72.0 |  63.2 |  70.9 |    76.0 |   51.8 |
Max freq 85C |  67.1 |  63.0 |  65.8 |   63.7 |  56.9 |  62.9 |    67.6 |   46.3 |


MULDIV2______|__tDIV_|__bDIV_|_qsDIV_|_eqsDIV_|_seDIV_|__dDIV_|_deqsDIV_|_dseDIV_|
Max freq 0C  | 104.5 | 102.0 |  98.2 |   82.0 |  63.4 | 100.7 |    77.6 |   48.9 |
Max freq 85C |  92.7 |  91.2 |  87.8 |   73.4 |  56.8 |  89.7 |    69.8 |   44.2 |


Is a reasonable idea to think that when the division operation path 
is the critical path at both MULDIV designs, the maximum operating 
frequencies should match when using the same divisor design, but it's 
important to take into account that both designs have little 
differences in the logic they apply, and the synthesitation tool 
Quartus tries to fit all the logic using the same logic elements, so 
routing is a important aspect of the synthesization, forcing to differ 
the maximum frequency possible between both designs even if the 
division path is the critical path and they're using the same divisor 
module. That's why the MULDIV and MULDIV2 have near the same maximum 
operating frequencies only when using the seDIVrest32 divisor module,
is just a coincidence.

In summary, my recommendation depends on what is the clock frequency 
that is being implemented. In the case of 85MHz clock, implement a 
MULDIV2 with the dDIVrest32u module. In the case of 45MHz clock, 
implement a MULDIV with the dseDIVrest32u module. This 
recommendations doesn't take into account the resource usage of 
each design or that this are estimations.



Francis Fuentes Diaz - UAB 22/11/2020